name: Build and Push OCI Image with Kubernetes Manifests

on:
  push:
    branches: [ "main", "master" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "main", "master" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      with:
        cache-disabled: false
        cache-read-only: ${{ github.event_name == 'pull_request' }}

    - name: Validate Gradle wrapper
      uses: gradle/wrapper-validation-action@v1

    - name: Make gradlew executable
      run: chmod +x gradlew

    - name: Run tests
      run: ./gradlew test --no-daemon --stacktrace

    - name: Build application
      run: ./gradlew bootJar --no-daemon --stacktrace

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr  
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

    - name: Build and push Docker image
      if: github.event_name != 'pull_request'
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  build-and-push-manifests:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for manifests
      id: meta-manifests
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-manifests
        tags: |
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix=sha-

    - name: Update image tag in Kubernetes manifests
      run: |
        # Extract the image tag from the previous job - use same logic as app image
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          TAG=${GITHUB_REF#refs/tags/}
        else
          TAG="main"  # Use main tag for consistency with app image
        fi
        
        # Update the deployment manifest with the correct image tag
        sed -i "s|IMAGE_TAG_PLACEHOLDER|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${TAG}|g" k8s/deployment.yaml

    - name: Create OCI artifact with Kubernetes manifests
      run: |
        # Install ORAS CLI
        curl -LO https://github.com/oras-project/oras/releases/download/v1.1.0/oras_1.1.0_linux_amd64.tar.gz
        tar -xzf oras_1.1.0_linux_amd64.tar.gz
        chmod +x oras
        
        # Determine tag to use
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          TAG=${GITHUB_REF#refs/tags/}
        else
          TAG="main"
        fi
        
        # Construct the full image name
        MANIFEST_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-manifests:${TAG}"
        
        # Push Kubernetes manifests as OCI artifact
        ./oras push "${MANIFEST_IMAGE}" \
          k8s/:application/vnd.k8s.yaml \
          --annotation "org.opencontainers.image.title=Kubernetes Manifests for ${{ github.repository }}" \
          --annotation "org.opencontainers.image.description=Kubernetes deployment manifests"